// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Message.proto
// Protobuf C++ Version: 5.30.0-dev

#ifndef Message_2eproto_2epb_2eh
#define Message_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Message_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Message_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Message_2eproto;
}  // extern "C"
namespace sync {
enum MsgType : int;
bool MsgType_IsValid(int value);
extern const uint32_t MsgType_internal_data_[];
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Message_class_data_;
class MsgBody;
struct MsgBodyDefaultTypeInternal;
extern MsgBodyDefaultTypeInternal _MsgBody_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull MsgBody_class_data_;
class MsgMove;
struct MsgMoveDefaultTypeInternal;
extern MsgMoveDefaultTypeInternal _MsgMove_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull MsgMove_class_data_;
}  // namespace sync
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::sync::MsgType_internal_data_>
    internal::EnumTraitsImpl::value<::sync::MsgType>;
}  // namespace protobuf
}  // namespace google

namespace sync {
enum MsgType : int {
  MSG_TYPE_NONE = 0,
  MSG_TYPE_LOGIN = 1,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MsgType_IsValid(int value);
extern const uint32_t MsgType_internal_data_[];
inline constexpr MsgType MsgType_MIN =
    static_cast<MsgType>(0);
inline constexpr MsgType MsgType_MAX =
    static_cast<MsgType>(1);
inline constexpr int MsgType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
MsgType_descriptor();
template <typename T>
const std::string& MsgType_Name(T value) {
  static_assert(std::is_same<T, MsgType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MsgType_Name().");
  return MsgType_Name(static_cast<MsgType>(value));
}
template <>
inline const std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MsgType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool MsgType_Parse(absl::string_view name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
      MsgType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class MsgMove final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sync.MsgMove) */ {
 public:
  inline MsgMove() : MsgMove(nullptr) {}
  ~MsgMove() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgMove* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgMove));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgMove(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgMove(const MsgMove& from) : MsgMove(nullptr, from) {}
  inline MsgMove(MsgMove&& from) noexcept
      : MsgMove(nullptr, std::move(from)) {}
  inline MsgMove& operator=(const MsgMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgMove& operator=(MsgMove&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgMove& default_instance() {
    return *reinterpret_cast<const MsgMove*>(
        &_MsgMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MsgMove& a, MsgMove& b) { a.Swap(&b); }
  inline void Swap(MsgMove* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgMove* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgMove* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgMove>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgMove& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgMove& from) { MsgMove::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgMove* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sync.MsgMove"; }

 protected:
  explicit MsgMove(::google::protobuf::Arena* arena);
  MsgMove(::google::protobuf::Arena* arena, const MsgMove& from);
  MsgMove(::google::protobuf::Arena* arena, MsgMove&& from) noexcept
      : MsgMove(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAngleFieldNumber = 1,
  };
  // uint32 Angle = 1;
  void clear_angle() ;
  ::uint32_t angle() const;
  void set_angle(::uint32_t value);

  private:
  ::uint32_t _internal_angle() const;
  void _internal_set_angle(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sync.MsgMove)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgMove& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t angle_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull MsgMove_class_data_;
// -------------------------------------------------------------------

class MsgBody final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sync.MsgBody) */ {
 public:
  inline MsgBody() : MsgBody(nullptr) {}
  ~MsgBody() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgBody* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgBody));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgBody(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgBody(const MsgBody& from) : MsgBody(nullptr, from) {}
  inline MsgBody(MsgBody&& from) noexcept
      : MsgBody(nullptr, std::move(from)) {}
  inline MsgBody& operator=(const MsgBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBody& operator=(MsgBody&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgBody& default_instance() {
    return *reinterpret_cast<const MsgBody*>(
        &_MsgBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MsgBody& a, MsgBody& b) { a.Swap(&b); }
  inline void Swap(MsgBody* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgBody* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgBody>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgBody& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgBody& from) { MsgBody::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgBody* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sync.MsgBody"; }

 protected:
  explicit MsgBody(::google::protobuf::Arena* arena);
  MsgBody(::google::protobuf::Arena* arena, const MsgBody& from);
  MsgBody(::google::protobuf::Arena* arena, MsgBody&& from) noexcept
      : MsgBody(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMoveFieldNumber = 1,
  };
  // optional .sync.MsgMove move = 1;
  bool has_move() const;
  void clear_move() ;
  const ::sync::MsgMove& move() const;
  [[nodiscard]] ::sync::MsgMove* release_move();
  ::sync::MsgMove* mutable_move();
  void set_allocated_move(::sync::MsgMove* value);
  void unsafe_arena_set_allocated_move(::sync::MsgMove* value);
  ::sync::MsgMove* unsafe_arena_release_move();

  private:
  const ::sync::MsgMove& _internal_move() const;
  ::sync::MsgMove* _internal_mutable_move();

  public:
  // @@protoc_insertion_point(class_scope:sync.MsgBody)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgBody& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sync::MsgMove* move_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull MsgBody_class_data_;
// -------------------------------------------------------------------

class Message final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sync.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Message* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Message));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message(const Message& from) : Message(nullptr, from) {}
  inline Message(Message&& from) noexcept
      : Message(nullptr, std::move(from)) {}
  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *reinterpret_cast<const Message*>(
        &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Message& a, Message& b) { a.Swap(&b); }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message& from) { Message::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Message* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sync.Message"; }

 protected:
  explicit Message(::google::protobuf::Arena* arena);
  Message(::google::protobuf::Arena* arena, const Message& from);
  Message(::google::protobuf::Arena* arena, Message&& from) noexcept
      : Message(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBodyFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional .sync.MsgBody body = 2;
  bool has_body() const;
  void clear_body() ;
  const ::sync::MsgBody& body() const;
  [[nodiscard]] ::sync::MsgBody* release_body();
  ::sync::MsgBody* mutable_body();
  void set_allocated_body(::sync::MsgBody* value);
  void unsafe_arena_set_allocated_body(::sync::MsgBody* value);
  ::sync::MsgBody* unsafe_arena_release_body();

  private:
  const ::sync::MsgBody& _internal_body() const;
  ::sync::MsgBody* _internal_mutable_body();

  public:
  // optional .sync.MsgType type = 1;
  bool has_type() const;
  void clear_type() ;
  ::sync::MsgType type() const;
  void set_type(::sync::MsgType value);

  private:
  ::sync::MsgType _internal_type() const;
  void _internal_set_type(::sync::MsgType value);

  public:
  // @@protoc_insertion_point(class_scope:sync.Message)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Message& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sync::MsgBody* body_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Message_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgMove

// uint32 Angle = 1;
inline void MsgMove::clear_angle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angle_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t MsgMove::angle() const {
  // @@protoc_insertion_point(field_get:sync.MsgMove.Angle)
  return _internal_angle();
}
inline void MsgMove::set_angle(::uint32_t value) {
  _internal_set_angle(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:sync.MsgMove.Angle)
}
inline ::uint32_t MsgMove::_internal_angle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.angle_;
}
inline void MsgMove::_internal_set_angle(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angle_ = value;
}

// -------------------------------------------------------------------

// MsgBody

// optional .sync.MsgMove move = 1;
inline bool MsgBody::has_move() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.move_ != nullptr);
  return value;
}
inline void MsgBody::clear_move() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.move_ != nullptr) _impl_.move_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sync::MsgMove& MsgBody::_internal_move() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sync::MsgMove* p = _impl_.move_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync::MsgMove&>(::sync::_MsgMove_default_instance_);
}
inline const ::sync::MsgMove& MsgBody::move() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sync.MsgBody.move)
  return _internal_move();
}
inline void MsgBody::unsafe_arena_set_allocated_move(::sync::MsgMove* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.move_);
  }
  _impl_.move_ = reinterpret_cast<::sync::MsgMove*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync.MsgBody.move)
}
inline ::sync::MsgMove* MsgBody::release_move() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sync::MsgMove* released = _impl_.move_;
  _impl_.move_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sync::MsgMove* MsgBody::unsafe_arena_release_move() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sync.MsgBody.move)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sync::MsgMove* temp = _impl_.move_;
  _impl_.move_ = nullptr;
  return temp;
}
inline ::sync::MsgMove* MsgBody::_internal_mutable_move() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.move_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sync::MsgMove>(GetArena());
    _impl_.move_ = reinterpret_cast<::sync::MsgMove*>(p);
  }
  return _impl_.move_;
}
inline ::sync::MsgMove* MsgBody::mutable_move() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sync::MsgMove* _msg = _internal_mutable_move();
  // @@protoc_insertion_point(field_mutable:sync.MsgBody.move)
  return _msg;
}
inline void MsgBody::set_allocated_move(::sync::MsgMove* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.move_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.move_ = reinterpret_cast<::sync::MsgMove*>(value);
  // @@protoc_insertion_point(field_set_allocated:sync.MsgBody.move)
}

// -------------------------------------------------------------------

// Message

// optional .sync.MsgType type = 1;
inline bool Message::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::sync::MsgType Message::type() const {
  // @@protoc_insertion_point(field_get:sync.Message.type)
  return _internal_type();
}
inline void Message::set_type(::sync::MsgType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:sync.Message.type)
}
inline ::sync::MsgType Message::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::sync::MsgType>(_impl_.type_);
}
inline void Message::_internal_set_type(::sync::MsgType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// optional .sync.MsgBody body = 2;
inline bool Message::has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.body_ != nullptr);
  return value;
}
inline void Message::clear_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.body_ != nullptr) _impl_.body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sync::MsgBody& Message::_internal_body() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sync::MsgBody* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync::MsgBody&>(::sync::_MsgBody_default_instance_);
}
inline const ::sync::MsgBody& Message::body() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sync.Message.body)
  return _internal_body();
}
inline void Message::unsafe_arena_set_allocated_body(::sync::MsgBody* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = reinterpret_cast<::sync::MsgBody*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync.Message.body)
}
inline ::sync::MsgBody* Message::release_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sync::MsgBody* released = _impl_.body_;
  _impl_.body_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sync::MsgBody* Message::unsafe_arena_release_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sync.Message.body)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sync::MsgBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::sync::MsgBody* Message::_internal_mutable_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.body_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sync::MsgBody>(GetArena());
    _impl_.body_ = reinterpret_cast<::sync::MsgBody*>(p);
  }
  return _impl_.body_;
}
inline ::sync::MsgBody* Message::mutable_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sync::MsgBody* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:sync.Message.body)
  return _msg;
}
inline void Message::set_allocated_body(::sync::MsgBody* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.body_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.body_ = reinterpret_cast<::sync::MsgBody*>(value);
  // @@protoc_insertion_point(field_set_allocated:sync.Message.body)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace sync


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::sync::MsgType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sync::MsgType>() {
  return ::sync::MsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // Message_2eproto_2epb_2eh

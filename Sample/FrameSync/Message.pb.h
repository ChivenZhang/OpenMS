// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Message.proto
// Protobuf C++ Version: 5.30.0-dev

#ifndef Message_2eproto_2epb_2eh
#define Message_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Message_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Message_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Message_2eproto;
}  // extern "C"
namespace sync {
enum MsgType : int;
bool MsgType_IsValid(int value);
extern const uint32_t MsgType_internal_data_[];
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Message_class_data_;
class MsgBeginBattle;
struct MsgBeginBattleDefaultTypeInternal;
extern MsgBeginBattleDefaultTypeInternal _MsgBeginBattle_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull MsgBeginBattle_class_data_;
class MsgBody;
struct MsgBodyDefaultTypeInternal;
extern MsgBodyDefaultTypeInternal _MsgBody_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull MsgBody_class_data_;
class MsgEndBattle;
struct MsgEndBattleDefaultTypeInternal;
extern MsgEndBattleDefaultTypeInternal _MsgEndBattle_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull MsgEndBattle_class_data_;
class MsgEnterBattle;
struct MsgEnterBattleDefaultTypeInternal;
extern MsgEnterBattleDefaultTypeInternal _MsgEnterBattle_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull MsgEnterBattle_class_data_;
class MsgExitBattle;
struct MsgExitBattleDefaultTypeInternal;
extern MsgExitBattleDefaultTypeInternal _MsgExitBattle_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull MsgExitBattle_class_data_;
class MsgMatchBattle;
struct MsgMatchBattleDefaultTypeInternal;
extern MsgMatchBattleDefaultTypeInternal _MsgMatchBattle_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull MsgMatchBattle_class_data_;
class MsgReadyBattle;
struct MsgReadyBattleDefaultTypeInternal;
extern MsgReadyBattleDefaultTypeInternal _MsgReadyBattle_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull MsgReadyBattle_class_data_;
}  // namespace sync
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::sync::MsgType_internal_data_>
    internal::EnumTraitsImpl::value<::sync::MsgType>;
}  // namespace protobuf
}  // namespace google

namespace sync {
enum MsgType : int {
  MSG_NONE = 0,
  MSG_ENTER_BATTLE = 1,
  MSG_MATCH_BATTLE = 2,
  MSG_READY_BATTLE = 3,
  MSG_BEGIN_BATTLE = 4,
  MSG_END_BATTLE = 5,
  MSG_EXIT_BATTLE = 6,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MsgType_IsValid(int value);
extern const uint32_t MsgType_internal_data_[];
inline constexpr MsgType MsgType_MIN =
    static_cast<MsgType>(0);
inline constexpr MsgType MsgType_MAX =
    static_cast<MsgType>(6);
inline constexpr int MsgType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
MsgType_descriptor();
template <typename T>
const std::string& MsgType_Name(T value) {
  static_assert(std::is_same<T, MsgType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MsgType_Name().");
  return MsgType_Name(static_cast<MsgType>(value));
}
template <>
inline const std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MsgType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool MsgType_Parse(absl::string_view name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
      MsgType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class MsgReadyBattle final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sync.MsgReadyBattle) */ {
 public:
  inline MsgReadyBattle() : MsgReadyBattle(nullptr) {}
  ~MsgReadyBattle() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgReadyBattle* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgReadyBattle));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgReadyBattle(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgReadyBattle(const MsgReadyBattle& from) : MsgReadyBattle(nullptr, from) {}
  inline MsgReadyBattle(MsgReadyBattle&& from) noexcept
      : MsgReadyBattle(nullptr, std::move(from)) {}
  inline MsgReadyBattle& operator=(const MsgReadyBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgReadyBattle& operator=(MsgReadyBattle&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgReadyBattle& default_instance() {
    return *reinterpret_cast<const MsgReadyBattle*>(
        &_MsgReadyBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MsgReadyBattle& a, MsgReadyBattle& b) { a.Swap(&b); }
  inline void Swap(MsgReadyBattle* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgReadyBattle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgReadyBattle* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgReadyBattle>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgReadyBattle& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgReadyBattle& from) { MsgReadyBattle::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgReadyBattle* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sync.MsgReadyBattle"; }

 protected:
  explicit MsgReadyBattle(::google::protobuf::Arena* arena);
  MsgReadyBattle(::google::protobuf::Arena* arena, const MsgReadyBattle& from);
  MsgReadyBattle(::google::protobuf::Arena* arena, MsgReadyBattle&& from) noexcept
      : MsgReadyBattle(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  [[nodiscard]] std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:sync.MsgReadyBattle)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      32, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgReadyBattle& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull MsgReadyBattle_class_data_;
// -------------------------------------------------------------------

class MsgMatchBattle final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sync.MsgMatchBattle) */ {
 public:
  inline MsgMatchBattle() : MsgMatchBattle(nullptr) {}
  ~MsgMatchBattle() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgMatchBattle* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgMatchBattle));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgMatchBattle(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgMatchBattle(const MsgMatchBattle& from) : MsgMatchBattle(nullptr, from) {}
  inline MsgMatchBattle(MsgMatchBattle&& from) noexcept
      : MsgMatchBattle(nullptr, std::move(from)) {}
  inline MsgMatchBattle& operator=(const MsgMatchBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgMatchBattle& operator=(MsgMatchBattle&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgMatchBattle& default_instance() {
    return *reinterpret_cast<const MsgMatchBattle*>(
        &_MsgMatchBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MsgMatchBattle& a, MsgMatchBattle& b) { a.Swap(&b); }
  inline void Swap(MsgMatchBattle* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgMatchBattle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgMatchBattle* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgMatchBattle>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgMatchBattle& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgMatchBattle& from) { MsgMatchBattle::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgMatchBattle* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sync.MsgMatchBattle"; }

 protected:
  explicit MsgMatchBattle(::google::protobuf::Arena* arena);
  MsgMatchBattle(::google::protobuf::Arena* arena, const MsgMatchBattle& from);
  MsgMatchBattle(::google::protobuf::Arena* arena, MsgMatchBattle&& from) noexcept
      : MsgMatchBattle(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  [[nodiscard]] std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:sync.MsgMatchBattle)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      32, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgMatchBattle& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull MsgMatchBattle_class_data_;
// -------------------------------------------------------------------

class MsgExitBattle final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sync.MsgExitBattle) */ {
 public:
  inline MsgExitBattle() : MsgExitBattle(nullptr) {}
  ~MsgExitBattle() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgExitBattle* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgExitBattle));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgExitBattle(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgExitBattle(const MsgExitBattle& from) : MsgExitBattle(nullptr, from) {}
  inline MsgExitBattle(MsgExitBattle&& from) noexcept
      : MsgExitBattle(nullptr, std::move(from)) {}
  inline MsgExitBattle& operator=(const MsgExitBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgExitBattle& operator=(MsgExitBattle&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgExitBattle& default_instance() {
    return *reinterpret_cast<const MsgExitBattle*>(
        &_MsgExitBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(MsgExitBattle& a, MsgExitBattle& b) { a.Swap(&b); }
  inline void Swap(MsgExitBattle* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgExitBattle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgExitBattle* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgExitBattle>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgExitBattle& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgExitBattle& from) { MsgExitBattle::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgExitBattle* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sync.MsgExitBattle"; }

 protected:
  explicit MsgExitBattle(::google::protobuf::Arena* arena);
  MsgExitBattle(::google::protobuf::Arena* arena, const MsgExitBattle& from);
  MsgExitBattle(::google::protobuf::Arena* arena, MsgExitBattle&& from) noexcept
      : MsgExitBattle(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  [[nodiscard]] std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:sync.MsgExitBattle)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      31, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgExitBattle& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull MsgExitBattle_class_data_;
// -------------------------------------------------------------------

class MsgEnterBattle final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sync.MsgEnterBattle) */ {
 public:
  inline MsgEnterBattle() : MsgEnterBattle(nullptr) {}
  ~MsgEnterBattle() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgEnterBattle* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgEnterBattle));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgEnterBattle(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgEnterBattle(const MsgEnterBattle& from) : MsgEnterBattle(nullptr, from) {}
  inline MsgEnterBattle(MsgEnterBattle&& from) noexcept
      : MsgEnterBattle(nullptr, std::move(from)) {}
  inline MsgEnterBattle& operator=(const MsgEnterBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgEnterBattle& operator=(MsgEnterBattle&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgEnterBattle& default_instance() {
    return *reinterpret_cast<const MsgEnterBattle*>(
        &_MsgEnterBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MsgEnterBattle& a, MsgEnterBattle& b) { a.Swap(&b); }
  inline void Swap(MsgEnterBattle* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgEnterBattle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgEnterBattle* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgEnterBattle>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgEnterBattle& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgEnterBattle& from) { MsgEnterBattle::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgEnterBattle* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sync.MsgEnterBattle"; }

 protected:
  explicit MsgEnterBattle(::google::protobuf::Arena* arena);
  MsgEnterBattle(::google::protobuf::Arena* arena, const MsgEnterBattle& from);
  MsgEnterBattle(::google::protobuf::Arena* arena, MsgEnterBattle&& from) noexcept
      : MsgEnterBattle(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  [[nodiscard]] std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:sync.MsgEnterBattle)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      32, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgEnterBattle& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull MsgEnterBattle_class_data_;
// -------------------------------------------------------------------

class MsgEndBattle final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sync.MsgEndBattle) */ {
 public:
  inline MsgEndBattle() : MsgEndBattle(nullptr) {}
  ~MsgEndBattle() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgEndBattle* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgEndBattle));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgEndBattle(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgEndBattle(const MsgEndBattle& from) : MsgEndBattle(nullptr, from) {}
  inline MsgEndBattle(MsgEndBattle&& from) noexcept
      : MsgEndBattle(nullptr, std::move(from)) {}
  inline MsgEndBattle& operator=(const MsgEndBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgEndBattle& operator=(MsgEndBattle&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgEndBattle& default_instance() {
    return *reinterpret_cast<const MsgEndBattle*>(
        &_MsgEndBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(MsgEndBattle& a, MsgEndBattle& b) { a.Swap(&b); }
  inline void Swap(MsgEndBattle* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgEndBattle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgEndBattle* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgEndBattle>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgEndBattle& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgEndBattle& from) { MsgEndBattle::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgEndBattle* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sync.MsgEndBattle"; }

 protected:
  explicit MsgEndBattle(::google::protobuf::Arena* arena);
  MsgEndBattle(::google::protobuf::Arena* arena, const MsgEndBattle& from);
  MsgEndBattle(::google::protobuf::Arena* arena, MsgEndBattle&& from) noexcept
      : MsgEndBattle(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  [[nodiscard]] std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:sync.MsgEndBattle)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      30, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgEndBattle& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull MsgEndBattle_class_data_;
// -------------------------------------------------------------------

class MsgBeginBattle final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sync.MsgBeginBattle) */ {
 public:
  inline MsgBeginBattle() : MsgBeginBattle(nullptr) {}
  ~MsgBeginBattle() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgBeginBattle* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgBeginBattle));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgBeginBattle(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgBeginBattle(const MsgBeginBattle& from) : MsgBeginBattle(nullptr, from) {}
  inline MsgBeginBattle(MsgBeginBattle&& from) noexcept
      : MsgBeginBattle(nullptr, std::move(from)) {}
  inline MsgBeginBattle& operator=(const MsgBeginBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBeginBattle& operator=(MsgBeginBattle&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgBeginBattle& default_instance() {
    return *reinterpret_cast<const MsgBeginBattle*>(
        &_MsgBeginBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(MsgBeginBattle& a, MsgBeginBattle& b) { a.Swap(&b); }
  inline void Swap(MsgBeginBattle* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgBeginBattle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgBeginBattle* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgBeginBattle>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgBeginBattle& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgBeginBattle& from) { MsgBeginBattle::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgBeginBattle* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sync.MsgBeginBattle"; }

 protected:
  explicit MsgBeginBattle(::google::protobuf::Arena* arena);
  MsgBeginBattle(::google::protobuf::Arena* arena, const MsgBeginBattle& from);
  MsgBeginBattle(::google::protobuf::Arena* arena, MsgBeginBattle&& from) noexcept
      : MsgBeginBattle(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  [[nodiscard]] std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:sync.MsgBeginBattle)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      32, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgBeginBattle& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull MsgBeginBattle_class_data_;
// -------------------------------------------------------------------

class MsgBody final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sync.MsgBody) */ {
 public:
  inline MsgBody() : MsgBody(nullptr) {}
  ~MsgBody() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgBody* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgBody));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgBody(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgBody(const MsgBody& from) : MsgBody(nullptr, from) {}
  inline MsgBody(MsgBody&& from) noexcept
      : MsgBody(nullptr, std::move(from)) {}
  inline MsgBody& operator=(const MsgBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBody& operator=(MsgBody&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgBody& default_instance() {
    return *reinterpret_cast<const MsgBody*>(
        &_MsgBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(MsgBody& a, MsgBody& b) { a.Swap(&b); }
  inline void Swap(MsgBody* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgBody* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgBody>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgBody& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgBody& from) { MsgBody::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgBody* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sync.MsgBody"; }

 protected:
  explicit MsgBody(::google::protobuf::Arena* arena);
  MsgBody(::google::protobuf::Arena* arena, const MsgBody& from);
  MsgBody(::google::protobuf::Arena* arena, MsgBody&& from) noexcept
      : MsgBody(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEnterBattleFieldNumber = 1,
    kMatchBattleFieldNumber = 2,
    kReadyBattleFieldNumber = 3,
    kBeginBattleFieldNumber = 4,
    kEndBattleFieldNumber = 5,
    kExitBattleFieldNumber = 6,
  };
  // optional .sync.MsgEnterBattle enter_battle = 1;
  bool has_enter_battle() const;
  void clear_enter_battle() ;
  const ::sync::MsgEnterBattle& enter_battle() const;
  [[nodiscard]] ::sync::MsgEnterBattle* release_enter_battle();
  ::sync::MsgEnterBattle* mutable_enter_battle();
  void set_allocated_enter_battle(::sync::MsgEnterBattle* value);
  void unsafe_arena_set_allocated_enter_battle(::sync::MsgEnterBattle* value);
  ::sync::MsgEnterBattle* unsafe_arena_release_enter_battle();

  private:
  const ::sync::MsgEnterBattle& _internal_enter_battle() const;
  ::sync::MsgEnterBattle* _internal_mutable_enter_battle();

  public:
  // optional .sync.MsgMatchBattle match_battle = 2;
  bool has_match_battle() const;
  void clear_match_battle() ;
  const ::sync::MsgMatchBattle& match_battle() const;
  [[nodiscard]] ::sync::MsgMatchBattle* release_match_battle();
  ::sync::MsgMatchBattle* mutable_match_battle();
  void set_allocated_match_battle(::sync::MsgMatchBattle* value);
  void unsafe_arena_set_allocated_match_battle(::sync::MsgMatchBattle* value);
  ::sync::MsgMatchBattle* unsafe_arena_release_match_battle();

  private:
  const ::sync::MsgMatchBattle& _internal_match_battle() const;
  ::sync::MsgMatchBattle* _internal_mutable_match_battle();

  public:
  // optional .sync.MsgReadyBattle ready_battle = 3;
  bool has_ready_battle() const;
  void clear_ready_battle() ;
  const ::sync::MsgReadyBattle& ready_battle() const;
  [[nodiscard]] ::sync::MsgReadyBattle* release_ready_battle();
  ::sync::MsgReadyBattle* mutable_ready_battle();
  void set_allocated_ready_battle(::sync::MsgReadyBattle* value);
  void unsafe_arena_set_allocated_ready_battle(::sync::MsgReadyBattle* value);
  ::sync::MsgReadyBattle* unsafe_arena_release_ready_battle();

  private:
  const ::sync::MsgReadyBattle& _internal_ready_battle() const;
  ::sync::MsgReadyBattle* _internal_mutable_ready_battle();

  public:
  // optional .sync.MsgBeginBattle begin_battle = 4;
  bool has_begin_battle() const;
  void clear_begin_battle() ;
  const ::sync::MsgBeginBattle& begin_battle() const;
  [[nodiscard]] ::sync::MsgBeginBattle* release_begin_battle();
  ::sync::MsgBeginBattle* mutable_begin_battle();
  void set_allocated_begin_battle(::sync::MsgBeginBattle* value);
  void unsafe_arena_set_allocated_begin_battle(::sync::MsgBeginBattle* value);
  ::sync::MsgBeginBattle* unsafe_arena_release_begin_battle();

  private:
  const ::sync::MsgBeginBattle& _internal_begin_battle() const;
  ::sync::MsgBeginBattle* _internal_mutable_begin_battle();

  public:
  // optional .sync.MsgEndBattle end_battle = 5;
  bool has_end_battle() const;
  void clear_end_battle() ;
  const ::sync::MsgEndBattle& end_battle() const;
  [[nodiscard]] ::sync::MsgEndBattle* release_end_battle();
  ::sync::MsgEndBattle* mutable_end_battle();
  void set_allocated_end_battle(::sync::MsgEndBattle* value);
  void unsafe_arena_set_allocated_end_battle(::sync::MsgEndBattle* value);
  ::sync::MsgEndBattle* unsafe_arena_release_end_battle();

  private:
  const ::sync::MsgEndBattle& _internal_end_battle() const;
  ::sync::MsgEndBattle* _internal_mutable_end_battle();

  public:
  // optional .sync.MsgExitBattle exit_battle = 6;
  bool has_exit_battle() const;
  void clear_exit_battle() ;
  const ::sync::MsgExitBattle& exit_battle() const;
  [[nodiscard]] ::sync::MsgExitBattle* release_exit_battle();
  ::sync::MsgExitBattle* mutable_exit_battle();
  void set_allocated_exit_battle(::sync::MsgExitBattle* value);
  void unsafe_arena_set_allocated_exit_battle(::sync::MsgExitBattle* value);
  ::sync::MsgExitBattle* unsafe_arena_release_exit_battle();

  private:
  const ::sync::MsgExitBattle& _internal_exit_battle() const;
  ::sync::MsgExitBattle* _internal_mutable_exit_battle();

  public:
  // @@protoc_insertion_point(class_scope:sync.MsgBody)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 6,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgBody& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sync::MsgEnterBattle* enter_battle_;
    ::sync::MsgMatchBattle* match_battle_;
    ::sync::MsgReadyBattle* ready_battle_;
    ::sync::MsgBeginBattle* begin_battle_;
    ::sync::MsgEndBattle* end_battle_;
    ::sync::MsgExitBattle* exit_battle_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull MsgBody_class_data_;
// -------------------------------------------------------------------

class Message final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sync.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Message* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Message));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message(const Message& from) : Message(nullptr, from) {}
  inline Message(Message&& from) noexcept
      : Message(nullptr, std::move(from)) {}
  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *reinterpret_cast<const Message*>(
        &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Message& a, Message& b) { a.Swap(&b); }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message& from) { Message::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Message* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sync.Message"; }

 protected:
  explicit Message(::google::protobuf::Arena* arena);
  Message(::google::protobuf::Arena* arena, const Message& from);
  Message(::google::protobuf::Arena* arena, Message&& from) noexcept
      : Message(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBodyFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .sync.MsgBody body = 2;
  bool has_body() const;
  void clear_body() ;
  const ::sync::MsgBody& body() const;
  [[nodiscard]] ::sync::MsgBody* release_body();
  ::sync::MsgBody* mutable_body();
  void set_allocated_body(::sync::MsgBody* value);
  void unsafe_arena_set_allocated_body(::sync::MsgBody* value);
  ::sync::MsgBody* unsafe_arena_release_body();

  private:
  const ::sync::MsgBody& _internal_body() const;
  ::sync::MsgBody* _internal_mutable_body();

  public:
  // .sync.MsgType type = 1;
  void clear_type() ;
  ::sync::MsgType type() const;
  void set_type(::sync::MsgType value);

  private:
  ::sync::MsgType _internal_type() const;
  void _internal_set_type(::sync::MsgType value);

  public:
  // @@protoc_insertion_point(class_scope:sync.Message)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Message& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sync::MsgBody* body_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Message_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgEnterBattle

// string name = 1;
inline void MsgEnterBattle::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MsgEnterBattle::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sync.MsgEnterBattle.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void MsgEnterBattle::set_name(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sync.MsgEnterBattle.name)
}
inline std::string* MsgEnterBattle::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sync.MsgEnterBattle.name)
  return _s;
}
inline const std::string& MsgEnterBattle::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void MsgEnterBattle::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* MsgEnterBattle::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* MsgEnterBattle::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sync.MsgEnterBattle.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void MsgEnterBattle::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sync.MsgEnterBattle.name)
}

// -------------------------------------------------------------------

// MsgMatchBattle

// string name = 1;
inline void MsgMatchBattle::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MsgMatchBattle::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sync.MsgMatchBattle.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void MsgMatchBattle::set_name(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sync.MsgMatchBattle.name)
}
inline std::string* MsgMatchBattle::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sync.MsgMatchBattle.name)
  return _s;
}
inline const std::string& MsgMatchBattle::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void MsgMatchBattle::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* MsgMatchBattle::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* MsgMatchBattle::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sync.MsgMatchBattle.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void MsgMatchBattle::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sync.MsgMatchBattle.name)
}

// -------------------------------------------------------------------

// MsgReadyBattle

// string name = 1;
inline void MsgReadyBattle::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MsgReadyBattle::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sync.MsgReadyBattle.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void MsgReadyBattle::set_name(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sync.MsgReadyBattle.name)
}
inline std::string* MsgReadyBattle::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sync.MsgReadyBattle.name)
  return _s;
}
inline const std::string& MsgReadyBattle::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void MsgReadyBattle::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* MsgReadyBattle::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* MsgReadyBattle::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sync.MsgReadyBattle.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void MsgReadyBattle::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sync.MsgReadyBattle.name)
}

// -------------------------------------------------------------------

// MsgBeginBattle

// string name = 1;
inline void MsgBeginBattle::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MsgBeginBattle::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sync.MsgBeginBattle.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void MsgBeginBattle::set_name(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sync.MsgBeginBattle.name)
}
inline std::string* MsgBeginBattle::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sync.MsgBeginBattle.name)
  return _s;
}
inline const std::string& MsgBeginBattle::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void MsgBeginBattle::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* MsgBeginBattle::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* MsgBeginBattle::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sync.MsgBeginBattle.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void MsgBeginBattle::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sync.MsgBeginBattle.name)
}

// -------------------------------------------------------------------

// MsgEndBattle

// string name = 1;
inline void MsgEndBattle::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MsgEndBattle::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sync.MsgEndBattle.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void MsgEndBattle::set_name(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sync.MsgEndBattle.name)
}
inline std::string* MsgEndBattle::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sync.MsgEndBattle.name)
  return _s;
}
inline const std::string& MsgEndBattle::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void MsgEndBattle::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* MsgEndBattle::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* MsgEndBattle::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sync.MsgEndBattle.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void MsgEndBattle::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sync.MsgEndBattle.name)
}

// -------------------------------------------------------------------

// MsgExitBattle

// string name = 1;
inline void MsgExitBattle::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MsgExitBattle::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sync.MsgExitBattle.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void MsgExitBattle::set_name(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sync.MsgExitBattle.name)
}
inline std::string* MsgExitBattle::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sync.MsgExitBattle.name)
  return _s;
}
inline const std::string& MsgExitBattle::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void MsgExitBattle::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* MsgExitBattle::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* MsgExitBattle::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sync.MsgExitBattle.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void MsgExitBattle::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sync.MsgExitBattle.name)
}

// -------------------------------------------------------------------

// MsgBody

// optional .sync.MsgEnterBattle enter_battle = 1;
inline bool MsgBody::has_enter_battle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.enter_battle_ != nullptr);
  return value;
}
inline void MsgBody::clear_enter_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.enter_battle_ != nullptr) _impl_.enter_battle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sync::MsgEnterBattle& MsgBody::_internal_enter_battle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sync::MsgEnterBattle* p = _impl_.enter_battle_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync::MsgEnterBattle&>(::sync::_MsgEnterBattle_default_instance_);
}
inline const ::sync::MsgEnterBattle& MsgBody::enter_battle() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sync.MsgBody.enter_battle)
  return _internal_enter_battle();
}
inline void MsgBody::unsafe_arena_set_allocated_enter_battle(::sync::MsgEnterBattle* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.enter_battle_);
  }
  _impl_.enter_battle_ = reinterpret_cast<::sync::MsgEnterBattle*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync.MsgBody.enter_battle)
}
inline ::sync::MsgEnterBattle* MsgBody::release_enter_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sync::MsgEnterBattle* released = _impl_.enter_battle_;
  _impl_.enter_battle_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sync::MsgEnterBattle* MsgBody::unsafe_arena_release_enter_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sync.MsgBody.enter_battle)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sync::MsgEnterBattle* temp = _impl_.enter_battle_;
  _impl_.enter_battle_ = nullptr;
  return temp;
}
inline ::sync::MsgEnterBattle* MsgBody::_internal_mutable_enter_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.enter_battle_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sync::MsgEnterBattle>(GetArena());
    _impl_.enter_battle_ = reinterpret_cast<::sync::MsgEnterBattle*>(p);
  }
  return _impl_.enter_battle_;
}
inline ::sync::MsgEnterBattle* MsgBody::mutable_enter_battle() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sync::MsgEnterBattle* _msg = _internal_mutable_enter_battle();
  // @@protoc_insertion_point(field_mutable:sync.MsgBody.enter_battle)
  return _msg;
}
inline void MsgBody::set_allocated_enter_battle(::sync::MsgEnterBattle* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.enter_battle_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.enter_battle_ = reinterpret_cast<::sync::MsgEnterBattle*>(value);
  // @@protoc_insertion_point(field_set_allocated:sync.MsgBody.enter_battle)
}

// optional .sync.MsgMatchBattle match_battle = 2;
inline bool MsgBody::has_match_battle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.match_battle_ != nullptr);
  return value;
}
inline void MsgBody::clear_match_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.match_battle_ != nullptr) _impl_.match_battle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::sync::MsgMatchBattle& MsgBody::_internal_match_battle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sync::MsgMatchBattle* p = _impl_.match_battle_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync::MsgMatchBattle&>(::sync::_MsgMatchBattle_default_instance_);
}
inline const ::sync::MsgMatchBattle& MsgBody::match_battle() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sync.MsgBody.match_battle)
  return _internal_match_battle();
}
inline void MsgBody::unsafe_arena_set_allocated_match_battle(::sync::MsgMatchBattle* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.match_battle_);
  }
  _impl_.match_battle_ = reinterpret_cast<::sync::MsgMatchBattle*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync.MsgBody.match_battle)
}
inline ::sync::MsgMatchBattle* MsgBody::release_match_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sync::MsgMatchBattle* released = _impl_.match_battle_;
  _impl_.match_battle_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sync::MsgMatchBattle* MsgBody::unsafe_arena_release_match_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sync.MsgBody.match_battle)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sync::MsgMatchBattle* temp = _impl_.match_battle_;
  _impl_.match_battle_ = nullptr;
  return temp;
}
inline ::sync::MsgMatchBattle* MsgBody::_internal_mutable_match_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.match_battle_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sync::MsgMatchBattle>(GetArena());
    _impl_.match_battle_ = reinterpret_cast<::sync::MsgMatchBattle*>(p);
  }
  return _impl_.match_battle_;
}
inline ::sync::MsgMatchBattle* MsgBody::mutable_match_battle() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::sync::MsgMatchBattle* _msg = _internal_mutable_match_battle();
  // @@protoc_insertion_point(field_mutable:sync.MsgBody.match_battle)
  return _msg;
}
inline void MsgBody::set_allocated_match_battle(::sync::MsgMatchBattle* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.match_battle_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.match_battle_ = reinterpret_cast<::sync::MsgMatchBattle*>(value);
  // @@protoc_insertion_point(field_set_allocated:sync.MsgBody.match_battle)
}

// optional .sync.MsgReadyBattle ready_battle = 3;
inline bool MsgBody::has_ready_battle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ready_battle_ != nullptr);
  return value;
}
inline void MsgBody::clear_ready_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ready_battle_ != nullptr) _impl_.ready_battle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::sync::MsgReadyBattle& MsgBody::_internal_ready_battle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sync::MsgReadyBattle* p = _impl_.ready_battle_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync::MsgReadyBattle&>(::sync::_MsgReadyBattle_default_instance_);
}
inline const ::sync::MsgReadyBattle& MsgBody::ready_battle() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sync.MsgBody.ready_battle)
  return _internal_ready_battle();
}
inline void MsgBody::unsafe_arena_set_allocated_ready_battle(::sync::MsgReadyBattle* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ready_battle_);
  }
  _impl_.ready_battle_ = reinterpret_cast<::sync::MsgReadyBattle*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync.MsgBody.ready_battle)
}
inline ::sync::MsgReadyBattle* MsgBody::release_ready_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sync::MsgReadyBattle* released = _impl_.ready_battle_;
  _impl_.ready_battle_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sync::MsgReadyBattle* MsgBody::unsafe_arena_release_ready_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sync.MsgBody.ready_battle)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sync::MsgReadyBattle* temp = _impl_.ready_battle_;
  _impl_.ready_battle_ = nullptr;
  return temp;
}
inline ::sync::MsgReadyBattle* MsgBody::_internal_mutable_ready_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ready_battle_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sync::MsgReadyBattle>(GetArena());
    _impl_.ready_battle_ = reinterpret_cast<::sync::MsgReadyBattle*>(p);
  }
  return _impl_.ready_battle_;
}
inline ::sync::MsgReadyBattle* MsgBody::mutable_ready_battle() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::sync::MsgReadyBattle* _msg = _internal_mutable_ready_battle();
  // @@protoc_insertion_point(field_mutable:sync.MsgBody.ready_battle)
  return _msg;
}
inline void MsgBody::set_allocated_ready_battle(::sync::MsgReadyBattle* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.ready_battle_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.ready_battle_ = reinterpret_cast<::sync::MsgReadyBattle*>(value);
  // @@protoc_insertion_point(field_set_allocated:sync.MsgBody.ready_battle)
}

// optional .sync.MsgBeginBattle begin_battle = 4;
inline bool MsgBody::has_begin_battle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.begin_battle_ != nullptr);
  return value;
}
inline void MsgBody::clear_begin_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.begin_battle_ != nullptr) _impl_.begin_battle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::sync::MsgBeginBattle& MsgBody::_internal_begin_battle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sync::MsgBeginBattle* p = _impl_.begin_battle_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync::MsgBeginBattle&>(::sync::_MsgBeginBattle_default_instance_);
}
inline const ::sync::MsgBeginBattle& MsgBody::begin_battle() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sync.MsgBody.begin_battle)
  return _internal_begin_battle();
}
inline void MsgBody::unsafe_arena_set_allocated_begin_battle(::sync::MsgBeginBattle* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.begin_battle_);
  }
  _impl_.begin_battle_ = reinterpret_cast<::sync::MsgBeginBattle*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync.MsgBody.begin_battle)
}
inline ::sync::MsgBeginBattle* MsgBody::release_begin_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sync::MsgBeginBattle* released = _impl_.begin_battle_;
  _impl_.begin_battle_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sync::MsgBeginBattle* MsgBody::unsafe_arena_release_begin_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sync.MsgBody.begin_battle)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sync::MsgBeginBattle* temp = _impl_.begin_battle_;
  _impl_.begin_battle_ = nullptr;
  return temp;
}
inline ::sync::MsgBeginBattle* MsgBody::_internal_mutable_begin_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.begin_battle_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sync::MsgBeginBattle>(GetArena());
    _impl_.begin_battle_ = reinterpret_cast<::sync::MsgBeginBattle*>(p);
  }
  return _impl_.begin_battle_;
}
inline ::sync::MsgBeginBattle* MsgBody::mutable_begin_battle() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::sync::MsgBeginBattle* _msg = _internal_mutable_begin_battle();
  // @@protoc_insertion_point(field_mutable:sync.MsgBody.begin_battle)
  return _msg;
}
inline void MsgBody::set_allocated_begin_battle(::sync::MsgBeginBattle* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.begin_battle_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.begin_battle_ = reinterpret_cast<::sync::MsgBeginBattle*>(value);
  // @@protoc_insertion_point(field_set_allocated:sync.MsgBody.begin_battle)
}

// optional .sync.MsgEndBattle end_battle = 5;
inline bool MsgBody::has_end_battle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_battle_ != nullptr);
  return value;
}
inline void MsgBody::clear_end_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.end_battle_ != nullptr) _impl_.end_battle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::sync::MsgEndBattle& MsgBody::_internal_end_battle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sync::MsgEndBattle* p = _impl_.end_battle_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync::MsgEndBattle&>(::sync::_MsgEndBattle_default_instance_);
}
inline const ::sync::MsgEndBattle& MsgBody::end_battle() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sync.MsgBody.end_battle)
  return _internal_end_battle();
}
inline void MsgBody::unsafe_arena_set_allocated_end_battle(::sync::MsgEndBattle* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_battle_);
  }
  _impl_.end_battle_ = reinterpret_cast<::sync::MsgEndBattle*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync.MsgBody.end_battle)
}
inline ::sync::MsgEndBattle* MsgBody::release_end_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::sync::MsgEndBattle* released = _impl_.end_battle_;
  _impl_.end_battle_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sync::MsgEndBattle* MsgBody::unsafe_arena_release_end_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sync.MsgBody.end_battle)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::sync::MsgEndBattle* temp = _impl_.end_battle_;
  _impl_.end_battle_ = nullptr;
  return temp;
}
inline ::sync::MsgEndBattle* MsgBody::_internal_mutable_end_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.end_battle_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sync::MsgEndBattle>(GetArena());
    _impl_.end_battle_ = reinterpret_cast<::sync::MsgEndBattle*>(p);
  }
  return _impl_.end_battle_;
}
inline ::sync::MsgEndBattle* MsgBody::mutable_end_battle() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::sync::MsgEndBattle* _msg = _internal_mutable_end_battle();
  // @@protoc_insertion_point(field_mutable:sync.MsgBody.end_battle)
  return _msg;
}
inline void MsgBody::set_allocated_end_battle(::sync::MsgEndBattle* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.end_battle_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.end_battle_ = reinterpret_cast<::sync::MsgEndBattle*>(value);
  // @@protoc_insertion_point(field_set_allocated:sync.MsgBody.end_battle)
}

// optional .sync.MsgExitBattle exit_battle = 6;
inline bool MsgBody::has_exit_battle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.exit_battle_ != nullptr);
  return value;
}
inline void MsgBody::clear_exit_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.exit_battle_ != nullptr) _impl_.exit_battle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::sync::MsgExitBattle& MsgBody::_internal_exit_battle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sync::MsgExitBattle* p = _impl_.exit_battle_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync::MsgExitBattle&>(::sync::_MsgExitBattle_default_instance_);
}
inline const ::sync::MsgExitBattle& MsgBody::exit_battle() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sync.MsgBody.exit_battle)
  return _internal_exit_battle();
}
inline void MsgBody::unsafe_arena_set_allocated_exit_battle(::sync::MsgExitBattle* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.exit_battle_);
  }
  _impl_.exit_battle_ = reinterpret_cast<::sync::MsgExitBattle*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync.MsgBody.exit_battle)
}
inline ::sync::MsgExitBattle* MsgBody::release_exit_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::sync::MsgExitBattle* released = _impl_.exit_battle_;
  _impl_.exit_battle_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sync::MsgExitBattle* MsgBody::unsafe_arena_release_exit_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sync.MsgBody.exit_battle)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::sync::MsgExitBattle* temp = _impl_.exit_battle_;
  _impl_.exit_battle_ = nullptr;
  return temp;
}
inline ::sync::MsgExitBattle* MsgBody::_internal_mutable_exit_battle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.exit_battle_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sync::MsgExitBattle>(GetArena());
    _impl_.exit_battle_ = reinterpret_cast<::sync::MsgExitBattle*>(p);
  }
  return _impl_.exit_battle_;
}
inline ::sync::MsgExitBattle* MsgBody::mutable_exit_battle() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::sync::MsgExitBattle* _msg = _internal_mutable_exit_battle();
  // @@protoc_insertion_point(field_mutable:sync.MsgBody.exit_battle)
  return _msg;
}
inline void MsgBody::set_allocated_exit_battle(::sync::MsgExitBattle* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.exit_battle_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.exit_battle_ = reinterpret_cast<::sync::MsgExitBattle*>(value);
  // @@protoc_insertion_point(field_set_allocated:sync.MsgBody.exit_battle)
}

// -------------------------------------------------------------------

// Message

// .sync.MsgType type = 1;
inline void Message::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::sync::MsgType Message::type() const {
  // @@protoc_insertion_point(field_get:sync.Message.type)
  return _internal_type();
}
inline void Message::set_type(::sync::MsgType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:sync.Message.type)
}
inline ::sync::MsgType Message::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::sync::MsgType>(_impl_.type_);
}
inline void Message::_internal_set_type(::sync::MsgType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .sync.MsgBody body = 2;
inline bool Message::has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.body_ != nullptr);
  return value;
}
inline void Message::clear_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.body_ != nullptr) _impl_.body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sync::MsgBody& Message::_internal_body() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sync::MsgBody* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync::MsgBody&>(::sync::_MsgBody_default_instance_);
}
inline const ::sync::MsgBody& Message::body() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sync.Message.body)
  return _internal_body();
}
inline void Message::unsafe_arena_set_allocated_body(::sync::MsgBody* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = reinterpret_cast<::sync::MsgBody*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync.Message.body)
}
inline ::sync::MsgBody* Message::release_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sync::MsgBody* released = _impl_.body_;
  _impl_.body_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sync::MsgBody* Message::unsafe_arena_release_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sync.Message.body)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sync::MsgBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::sync::MsgBody* Message::_internal_mutable_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.body_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sync::MsgBody>(GetArena());
    _impl_.body_ = reinterpret_cast<::sync::MsgBody*>(p);
  }
  return _impl_.body_;
}
inline ::sync::MsgBody* Message::mutable_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sync::MsgBody* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:sync.Message.body)
  return _msg;
}
inline void Message::set_allocated_body(::sync::MsgBody* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.body_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.body_ = reinterpret_cast<::sync::MsgBody*>(value);
  // @@protoc_insertion_point(field_set_allocated:sync.Message.body)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace sync


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::sync::MsgType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sync::MsgType>() {
  return ::sync::MsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // Message_2eproto_2epb_2eh
